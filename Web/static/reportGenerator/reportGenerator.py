from Tools.scripts.fixcid import rep
from reportlab.graphics.shapes import Drawing, Line
from reportlab.lib.pagesizes import A4
from reportlab.pdfgen import canvas
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Image, Table, PageBreak, PageTemplate, Frame
from reportlab.lib import colors
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from datetime import datetime

# Get the current local date and time and format it
current_datetime = datetime.now()
current_date = current_datetime.date()
current_time = current_datetime.time()
formatted_time = current_time.strftime("%H.%M.%S")


# Function for the diagnosis result for the patient for different diseases
def diagnosis_result(disease_type):
    if disease_type == "Brain Tumor":
        if disease_type == "Meningioma":
            return "Patient is diagnosed with Meningioma"
        elif disease_type == "Glioma":
            return "Patient is diagnosed with Glioma"
        elif disease_type == "Pituitary Tumor":
            return "Patient is diagnosed with Pituitary Tumor"
        else:
            return "Patient is diagnosed with Brain Tumor"
    elif disease_type == "Ischemic Stroke":
        return "Patient is diagnosed with Ischemic Stroke"
    elif disease_type == "Alzheimer's Disease":
        return "Patient is diagnosed with Alzheimer's Disease"
    else:
        return "Diagnosis result for the patient couldn't be found."


# Report data
user_name = "Uzman Arfan"
email = "seyeduzman@gmail.com"
disease_type = ""
diagnosis = diagnosis_result(disease_type)
disclaimer = ("**The report is generated by the AI model and the results are not 100% accurate. "
              "Please consult a doctor for further diagnosis.**")
input_Image = ""


# Create a PDF document
pdf_filename = "Cranium Cryptics diagnosis_report_" + user_name + "_" + formatted_time + ".pdf"
# document = SimpleDocTemplate(pdf_filename, pagesize=A4)

# document = SimpleDocTemplate(pdf_filename, pagesize=A4,
#                               leftMargin=inch, rightMargin=inch, topMargin=inch, bottomMargin=inch,
#                               borderWidth=1, borderColor=colors.black)

# Set the margins for the PDF document
left_margin = 36
right_margin = 36
top_margin = 36
bottom_margin = 36

document = SimpleDocTemplate(pdf_filename, pagesize=A4, leftMargin=left_margin * 2, rightMargin=right_margin * 2,
                             topMargin=top_margin * 2, bottomMargin=bottom_margin * 2)


# Function to add a border around the entire page
def add_border(canvas, doc):
    canvas.setStrokeColorRGB(0, 0, 0)  # Set border color (black)
    canvas.rect(left_margin, bottom_margin, A4[0] - left_margin - right_margin, A4[1] - bottom_margin - top_margin)


# Create a frame for the entire page
frame = Frame(left_margin, bottom_margin, A4[0] - left_margin - right_margin, A4[1] - bottom_margin - top_margin)

# Attach the border-drawing function to the 'afterPage' event of the canvas
document.addPageTemplates([PageTemplate(id='Border', frames=frame, onPage=add_border)])


# Styles for the document
styles = getSampleStyleSheet()

# Custom styles for the report
header_style = ParagraphStyle('Header', parent=styles['Title'], textColor=colors.black, fontSize=10, alignment=0)
title_style = ParagraphStyle('Title', parent=styles['Title'], fontSize=18, spaceAfter=12)
subtitle_style = ParagraphStyle('Subtitle', parent=styles['Title'], fontSize=14, textColor=colors.gray, alignment=0)
body_style = ParagraphStyle('BodyText', parent=styles['BodyText'], spaceAfter=12)

# Content to be added to the PDF
content = []

# Add header content
header_date = current_datetime.strftime("%d-%m-%Y")     # Format the date as DD-MM-YYYY
header_time = current_datetime.strftime("%H:%M")    # Format the time as HH:MM
webApplication_logo_path = "reportLogo.png"     # Replace with your logo path

header_table_data = [
    [Image(webApplication_logo_path, width=150, height=120), Paragraph(f"User Name: {user_name}<br/>"
                                                                      f"Email: {email}"
                                                                      f"<br/>Date: {header_date}"
                                                                      f"<br/>Time: {header_time}", header_style)],
]

header_table = Table(header_table_data, colWidths=[350, 200])
content.append(header_table)

# Add section line
# # Add some paragraphs or other content to the 'content' list
# paragraph_text = "This is a sample paragraph."
# paragraph = Paragraph(paragraph_text, getSampleStyleSheet()['Normal'])
# content.append(paragraph)
#
# # Add a spacer
# content.append(Spacer(1, 12))
#
# # Function to add a horizontal line at the bottom of each page
# def add_horizontal_line(canvas, doc):
#     canvas.line(0, 10, A4[0], 10)
#
# # Attach the line-drawing function to the 'onPage' event of the canvas
# document.onPage = add_horizontal_line
#
# class CustomDocTemplate(SimpleDocTemplate):
#     def afterPage(self):
#         self.canv.line(36, 36, A4[0] - 36, 36)  # Adjust the coordinates as needed
#
# # Create a list to store the content
# # content = []
#
# # Add some paragraphs or other content to the 'content' list
# paragraph_text = "This is a sample paragraph."
# paragraph = Paragraph(paragraph_text, getSampleStyleSheet()['Normal'])
# content.append(paragraph)
#
# Add a spacer
content.append(Spacer(1, 20))

#

# Add body content
body_content = [
    Spacer(1, 12),
    Paragraph("Diagnosis Report", title_style),
    Spacer(1, 12),
    Paragraph(f"Diagnosis Results: {diagnosis}", subtitle_style),
    Spacer(10, 100),
    Paragraph(disclaimer, body_style),
]
content.extend(body_content)

# Add section line
# Add footer content
footer_content = [
    Spacer(1, 12),
    Paragraph("Your Footer Content Here", subtitle_style),  # Replace with your footer content
]
content.extend(footer_content)

# Build the PDF document
document.build(content)